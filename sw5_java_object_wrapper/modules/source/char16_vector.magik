#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_method char16_vector.as_snake_case()
	## Convert self to snake_case.
	## @return {_self}
	_if _self.size < 2
	_then
		_return _self.lowercase
	_endif

	_local str << _self

	_local regex << /([A-Z]+)([A-Z][a-z])/
	str << regex.replace_all(str, "$1_$2")

	regex << /([a-z\d])([A-Z])/
	str << regex.replace_all(str, "$1_$2")

	regex << /-/
	str << regex.replace_all(str, "_")

	regex << /__/
	str << regex.replace_all(str, "_")

	_return str.lowercase
_endmethod
$

_pragma(classify_level=basic, topic={dskv})
_method char16_vector.as_camel_case()
	## Convert self to camel case.
	## @return {_self}
	_local str << _self
	_loop
		_local idx << str.index_of(%_)
		_if idx _is _unset _orif
		    str.size <= idx
		_then
			_return str
		_else
			str << write_string(
				str.subseq(1, idx - 1),
				str[idx + 1].uppercase,
				str.subseq(idx + 2))
		_endif
	_endloop
	_return str
_endmethod
$
